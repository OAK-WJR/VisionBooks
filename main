//
//  ContentView.swift
//  Books
//
//  Created by Minecraftxz.com on 2023/3/13.
//

import SwiftUI
import Vision
import AVFoundation

struct WordHighlighterView: View {
    @State private var words: [String] = []
    @State private var uncommonWords: Set<String> = []
    @State private var isUncommonWordListShown: Bool = false
    
    var body: some View {
        VStack {
            ZStack {
                Image("exampleImage")
                    .resizable()
                    .scaledToFit()
                ForEach(words, id: \.self) { word in
                    Button(action: {
                        if uncommonWords.contains(word) {
                            uncommonWords.remove(word)
                        } else {
                            uncommonWords.insert(word)
                        }
                    }) {
                        Text(word)
                            .font(Font.system(size: CGFloat(word.count) * 4.0))
                            .foregroundColor(uncommonWords.contains(word) ? .red : .black)
                            .opacity(uncommonWords.contains(word) ? 0.5 : 1.0)
                            .padding(8)
                            .background(Color.gray.opacity(0.5))
                            .cornerRadius(8)
                    }
                    .position(getWordPosition(word: word))
                }
            }
            HStack {
                Spacer()
                Button(action: {
                    isUncommonWordListShown.toggle()
                }) {
                    Text("Uncommon Words")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(8)
                }
                Spacer()
            }
            .padding()
            .sheet(isPresented: $isUncommonWordListShown) {
                UncommonWordListView(words: Array(uncommonWords))
            }
        }
        .onAppear {
            recognizeWordsInImage()
        }
    }
    func getWordPosition(word: String) -> CGPoint {
        // Get the word's bounding box from the Vision results
        if let wordIndex = words.firstIndex(of: word), let wordBox = results?.characterBoxes?[wordIndex].boundingBox {
            // Convert the Vision coordinates to UIKit coordinates
            let transform = CGAffineTransform(scaleX: 1, y: -1).translatedBy(x: 0, y: -CGFloat(imageSize.height))
            let correctedBox = wordBox.applying(transform)
            let center = CGPoint(x: correctedBox.midX, y: correctedBox.midY)
            // Convert the UIKit coordinates to SwiftUI coordinates
            let scale = UIScreen.main.bounds.size.width / imageSize.width
            return CGPoint(x: center.x * scale, y: center.y * scale)
        }
        return .zero
    }
    // Vision request and recognition results
    @State private var results: VNRecognizedTextObservation?
    // Image size for coordinate conversion
    @State private var imageSize: CGSize = .zero
    
    func recognizeWordsInImage() {
        guard let image = UIImage(named: "exampleImage") else { return }
        imageSize = image.size
        let request = VNRecognizeTextRequest(completionHandler: handleTextRecognition)
        let handler = VNImageRequestHandler(cgImage: image.cgImage!, options: [:])
        do {
            try handler.perform([request])
        } catch {
            print(error)
        }
    }
    func handleTextRecognition(request: VNRequest, error: Error?) {
        if let results = request.results as? [VNRecognizedTextObservation] {
            self.results = results.first
          let words = results.compactMap { observation in
              observation.topCandidates(1).first?.string
            }
            let stopWords = ["the", "and", "a", "an", "in", "on", "at", "of", "to", "for", "from", "with", "by", "is", "that", "which", "this", "these", "those", "was", "were", "be", "been", "being", "has", "have", "had", "having", "does", "do", "did", "doing", "can", "could", "will", "would", "should", "might", "may", "must"]
            self.words = words.filter { !stopWords.contains($0.lowercased()) }
        }
    }
}
struct UncommonWordListView: View {
    let words: [String]
    
    var body: some View {
        NavigationView {
            List(words, id: \.self) { word in
                NavigationLink(destination: WordDefinitionView(word: word)) {
                    Text(word)
                }
            }
            .navigationTitle("Uncommon Words")
        }
    }
}
struct WordDefinitionView: View {
    let word: String
    
    @State private var definition: String?
    @State private var pronunciation: String?
    
    var body: some View {
        VStack {
            if let definition = definition, let pronunciation = pronunciation {
                Text("\(word): \(pronunciation)")
                    .font(.headline)
                Text(definition)
                    .font(.body)
            } else {
                ProgressView()
            }
        }
        .padding()
        .onAppear {
            fetchWordDefinition()
        }
    }
    
    func fetchWordDefinition() {
        guard let url = URL(string: "https://www.dictionaryapi.com/api/v3/references/learners/json/\(word)?key=your-dictionary-api-key") else { return }
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                do {
                    let result = try JSONDecoder().decode([DictionaryResult].self, from: data)
                    if let firstResult = result.first {
                        self.definition = firstResult.shortdef.first
                        self.pronunciation = firstResult.hwi.prs.first?.mw
                    }
                } catch {
                    print(error)
                }
            }
        }
        .resume()
    }
}
struct DictionaryResult: Codable {
    let meta: DictionaryMeta
    let hwi: HeadwordInfo
    let shortdef: [String]
}

struct DictionaryMeta: Codable {
    let id: String
}

struct HeadwordInfo: Codable {
    let hw: String
    let prs: [Pronunciation]
}

struct Pronunciation: Codable {
    let mw: String
}
extension VNRecognizedTextObservation {
    func topCandidates(_ maxCount: Int) -> [VNRecognizedText] {
        let candidates = self.topCandidates(maxCount).compactMap({ $0 })
        return candidates.count > maxCount ? Array(candidates.prefix(maxCount)) : candidates
    }
}
struct WordHighlighterView_Previews: PreviewProvider {
    static var previews: some View {
        WordHighlighterView()
    }
}
@main
struct WordHighlighterApp: App {
    @StateObject var viewModel = WordHighlighterViewModel()
    
    var body: some Scene {
        WindowGroup {
            WordHighlighterView()
                .environmentObject(viewModel)
        }
    }
}
class WordHighlighterViewModel: ObservableObject {
    @Published var words: [String] = []
    @Published var uncommonWords: [String] = []
    
    func addWord(_ word: String) {
        if !words.contains(word) {
            words.append(word)
        }
        if !uncommonWords.contains(word) {
            uncommonWords.append(word)
        }
    }
    
    func removeWord(_ word: String) {
        if let index = words.firstIndex(of: word) {
            words.remove(at: index)
        }
        if let index = uncommonWords.firstIndex(of: word) {
            uncommonWords.remove(at: index)
        }
    }
}
struct WordButton: View {
    let word: String
    let isUncommon: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(word)
                .fontWeight(.bold)
                .foregroundColor(.white)
                .padding(.vertical, 8)
                .padding(.horizontal, 16)
                .background(isUncommon ? Color.red : Color.blue)
                .cornerRadius(8)
        }
    }
}
struct WordHighlighterView: View {
    @State private var image: UIImage? = nil
    @State private var recognizedText: [VNRecognizedTextObservation] = []
    @State private var uncommonWordsVisible = false
    @StateObject var viewModel = WordHighlighterViewModel()
    
    var body: some View {
        NavigationView {
            VStack {
                ZStack {
                    if let image = image {
                        Image(uiImage: image)
                            .resizable()
                            .scaledToFit()
                    } else {
                        Text("Tap the camera button to take a picture.")
                            .multilineTextAlignment(.center)
                            .foregroundColor(.secondary)
                    }
                    ForEach(recognizedText) { observation in
                        let word = observation.topCandidates(1)[0].string
                        let isUncommon = viewModel.uncommonWords.contains(word)
                        WordButton(word: word, isUncommon: isUncommon) {
                            if isUncommon {
                                viewModel.removeWord(word)
                            } else {
                                viewModel.addWord(word)
                            }
                        }
                        .position(observation.topLeft)
                    }
                }
                .onAppear {
                    askPermissionIfNeeded()
                }
                .sheet(isPresented: $uncommonWordsVisible) {
                    UncommonWordsView()
                        .environmentObject(viewModel)
                }
                HStack {
                    Spacer()
                    Button(action: capturePhoto) {
                        Image(systemName: "camera")
                            .font(.system(size: 24))
                            .foregroundColor(.white)
                            .padding(16)
                            .background(Color.blue)
                            .clipShape(Circle())
                    }
                    Spacer()
                }
                .padding(.bottom, 32)
            }
            .navigationBarTitle("Word Highlighter")
            .navigationBarItems(trailing:
                Button(action: {
                    uncommonWordsVisible = true
                }) {
                    Image(systemName: "list.bullet")
                }
            )
        }
    }
    
    // ...
}
extension WordHighlighterView {
    func capturePhoto() {
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = self
        imagePicker.sourceType = .camera
        imagePicker.allowsEditing = true
        present(imagePicker, animated: true)
    }
    
    func askPermissionIfNeeded() {
        let status = AVCaptureDevice.authorizationStatus(for: .video)
        if status == .notDetermined {
            AVCaptureDevice.requestAccess(for: .video) { granted in
                if !granted {
                    DispatchQueue.main.async {
                        let message = "Word Highlighter needs camera access to work properly. Please enable camera access in Settings."
                        let alert = UIAlertController(title: "Camera Access Denied", message: message, preferredStyle: .alert)
                        alert.addAction(UIAlertAction(title: "OK", style: .default))
                        present(alert, animated: true)
                    }
                }
            }
        } else if status == .denied || status == .restricted {
            let message = "Word Highlighter needs camera access to work properly. Please enable camera access in Settings."
            let alert = UIAlertController(title: "Camera Access Denied", message: message, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default))
            present(alert, animated: true)
        }
    }
    
    func present(_ viewController: UIViewController, animated: Bool) {
        DispatchQueue.main.async {
            self.presentedViewController?.present(viewController, animated: animated)
        }
    }
}
extension WordHighlighterView: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        image = info[.editedImage] as? UIImage
        recognizeText()
        dismiss(animated: true)
    }
    
    func recognizeText() {
        guard let image = image, let ciImage = CIImage(image: image) else {
            return
        }
        let request = VNRecognizeTextRequest(completionHandler: handleRecognizedText)
        let handler = VNImageRequestHandler(ciImage: ciImage)
        try? handler.perform([request])
    }
    
    func handleRecognizedText(request: VNRequest, error: Error?) {
        if let error = error {
            print("Error recognizing text: \(error.localizedDescription)")
            return
        }
        if let observations = request.results as? [VNRecognizedTextObservation] {
            recognizedText = observations.filter { observation in
                if let word = observation.topCandidates(1)[0].string {
                    return !WordHighlighterCommonWords.commonWords.contains(word)
                }
                return false
            }
        }
    }
}
class WordHighlighterViewModel: ObservableObject {
    @Published var uncommonWords: [String] = []
    
    func addWord(_ word: String) {
        if !uncommonWords.contains(word) {
            uncommonWords.append(word)
        }
    }
    
    func removeWord(_ word: String) {
        if let index = uncommonWords.firstIndex(of: word) {
            uncommonWords.remove(at: index)
        }
    }
}
struct UncommonWordsView: View {
    @EnvironmentObject var viewModel: WordHighlighterViewModel
    
    var body: some View {
        List {
            ForEach(viewModel.uncommonWords, id: \.self) { word in
                NavigationLink(destination: WordDetailView(word: word)) {
                    Text(word)
                }
            }
            .onDelete(perform: delete)
        }
        .navigationBarTitle("Uncommon Words")
    }
    
    func delete(at offsets: IndexSet) {
        viewModel.uncommonWords.remove(atOffsets: offsets)
    }
}
struct WordDetailView: View {
    let word: String
    @State private var definition: String = ""
    @State private var pronunciation: String = ""
    @State private var isFetchingData = false
    
    var body: some View {
        VStack {
            if isFetchingData {
                ProgressView()
            } else {
                Text(definition)
                    .font(.title)
                    .padding()
                Text(pronunciation)
                    .foregroundColor(.secondary)
                    .padding()
            }
        }
        .onAppear {
            fetchData()
        }
        .navigationTitle(word)
    }
    
    func fetchData() {
        guard let url = URL(string: "https://api.dictionaryapi.dev/api/v2/entries/en/\(word.lowercased())") else {
            return
        }
        isFetchingData = true
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                if let wordData = try? JSONDecoder().decode([WordData].self, from: data) {
                    DispatchQueue.main.async {
                        if let definition = wordData.first?.meanings.first?.definitions.first?.definition {
                            self.definition = definition
                        }
                        if let pronunciation = wordData.first?.phonetics.first?.text {
                            self.pronunciation = "/\(pronunciation)/"
                        }
                        isFetchingData = false
                    }
                } else {
                    isFetchingData = false
                }
            } else {
                isFetchingData = false
            }
        }.resume()
    }
}
struct WordData: Decodable {
    let meanings: [Meaning]
    let phonetics: [Phonetic]
}

struct Meaning: Decodable {
    let definitions: [Definition]
}

struct Definition: Decodable {
    let definition: String
}

struct Phonetic: Decodable {
    let text: String
}
struct WordHighlighterCommonWords {
    static let commonWords = [
        "a", "an", "the", "and", "but", "or", "for", "nor", "on", "at", "to",
        "from", "by", "in", "out", "of", "with", "up", "off", "down", "over",
        "under", "be", "is", "am", "are", "was", "were", "has", "have", "had",
        "do", "does", "did", "can", "could", "will", "would", "shall", "should",
        "must", "might", "may", "if", "then", "else", "when", "where", "who",
        "what", "why", "how", "all", "any", "both", "each", "few", "more",
        "most", "other", "some", "such", "no", "nor", "not", "only", "own",
        "same", "so", "than", "too", "very"
    ]
}
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        let viewModel = WordHighlighterViewModel()
        viewModel.addWord("apple")
        viewModel.addWord("banana")
        viewModel.addWord("cherry")
        return ContentView()
            .environmentObject(viewModel)
    }
}
class WordHighlighterViewModel: ObservableObject {
    @Published var words: [Word] = []
    @Published var uncommonWords: [String] = []
    
    func addWord(_ word: String) {
        let isCommon = WordHighlighterCommonWords.commonWords.contains(word.lowercased())
        let newWord = Word(word: word, isCommon: isCommon)
        words.append(newWord)
        
        if !isCommon {
            uncommonWords.append(word)
        }
    }
    
    func removeWord(at index: Int) {
        let word = words[index]
        if !word.isCommon {
            if let uncommonWordIndex = uncommonWords.firstIndex(of: word.word) {
                uncommonWords.remove(at: uncommonWordIndex)
            }
        }
        words.remove(at: index)
    }
    
    func toggleUncommonWord(at index: Int) {
        let word = uncommonWords[index]
        if let wordIndex = words.firstIndex(where: { $0.word == word }) {
            removeWord(at: wordIndex)
        } else {
            addWord(word)
        }
    }
}
struct WordButton: View {
    let word: String
    let isCommon: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(word)
                .font(.system(size: 16, weight: .bold))
                .padding(.horizontal, 8)
                .padding(.vertical, 4)
                .background(isCommon ? Color.gray.opacity(0.3) : Color.blue.opacity(0.3))
                .cornerRadius(6)
        }
    }
}
struct WordListRow: View {
    let word: String
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                Text(word)
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(isSelected ? Color.white : Color.black)
                    .frame(maxWidth: .infinity, alignment: .leading)
                if isSelected {
                    Image(systemName: "checkmark")
                        .foregroundColor(.white)
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
            .background(isSelected ? Color.blue : Color.clear)
        }
    }
}
struct WordDetail: View {
    let word: String
    let definition: String
    let pronunciation: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(word)
                .font(.system(size: 32, weight: .bold))
            Text(pronunciation)
                .font(.system(size: 18, weight: .semibold))
                .foregroundColor(Color.gray)
            Text(definition)
                .font(.system(size: 18, weight: .regular))
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding()
    }
}
struct WordDetail_Previews: PreviewProvider {
    static var previews: some View {
        WordDetail(word: "apple", definition: "A round fruit with red, green, or yellow skin and a white inside.", pronunciation: "/ˈæpəl/")
    }
}
struct WordHighlighterApp: App {
    @StateObject var viewModel = WordHighlighterViewModel()
    
    var body: some Scene {
        WindowGroup {
            ContentView(viewModel: viewModel)
        }
    }
}
